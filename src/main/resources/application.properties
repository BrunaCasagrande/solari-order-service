server.port=8082
spring.application.name=solari_order

logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.br.com.pupposoft.poc.springcloud.usuario=TRACE

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DATASOURCE_URL:jdbc:mysql://localhost:3310/solari_order_db}
spring.datasource.username=${DATASOURCE_USER:user}
spring.datasource.password=${DATASOURCE_PASS:senha}

spring.datasource.hikari.poolName=solari_order
spring.datasource.hikari.maximumPoolSize=5
spring.datasource.hikari.connectionTestQuery=SELECT 1
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.maxLifetime=1800000

#spring.jpa.database-platform=
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=none

# Configura��o do Kafka
spring.kafka.bootstrap-servers=${KAFKA_BASE_SERVER:localhost:29092}
spring.kafka.consumer.group-id=${KAFKA_GROUP:my-group}
spring.kafka.consumer.topic=${KAFKA_TOPIC:novo-pedido-queue}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

resilience4j.retry.aspect.order=100
resilience4j.retry.instances.retryClientService.maxAttempts=3
resilience4j.retry.instances.retryClientService.waitDuration=1s
resilience4j.retry.instances.retryClientService.retryExceptions=org.springframework.web.client.ResourceAccessException,java.net.ConnectException

resilience4j.circuitbreaker.aspect.order=200
resilience4j.circuitbreaker.instances.circuitBrakerClientService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBrakerClientService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.circuitBrakerClientService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.circuitBrakerClientService.slidingWindowSize=100
resilience4j.circuitbreaker.instances.circuitBrakerClientService.recordExceptions=org.springframework.web.client.ResourceAccessException,java.net.ConnectException
resilience4j.circuitbreaker.instances.circuitBrakerClientService.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.circuitBrakerProductService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBrakerProductService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.circuitBrakerProductService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.circuitBrakerProductService.slidingWindowSize=100
resilience4j.circuitbreaker.instances.circuitBrakerProductService.recordExceptions=org.springframework.web.Product.ResourceAccessException,java.net.ConnectException
resilience4j.circuitbreaker.instances.circuitBrakerProductService.eventConsumerBufferSize=10

resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.slidingWindowSize=100
resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.recordExceptions=org.springframework.web.Inventory.ResourceAccessException,java.net.ConnectException
resilience4j.circuitbreaker.instances.circuitBrakerInventoryService.eventConsumerBufferSize=10

rest.url.basepath.client: ${URL_CLIENT:http://localhost:8080/solari/v1/clients/}
rest.url.basepath.product: ${URL_PRODCT:http://localhost:8083/solari/v1/products/}
rest.url.basepath.inventory: ${URL_ORDER:http://localhost:8084/solari/v1/inventory/}
